# see orb options at
# https://github.com/cypress-io/circleci-orb
version: 2.1
orbs:
  cypress: cypress-io/cypress@1
  node: circleci/node@5.2.0
  gcp-gke: circleci/gcp-gke@0.1.0
  gcr: circleci/gcp-gcr@0.0.2

executors:
  latest:
    docker:
      - image: cypress/browsers:node12.13.0-chrome78-ff70

commands:
  save-partial-coverage-report:
    description: |
      Saves a single possibly partial coverage report by adding it to the
      workspace. This way different CircleCI jobs can run parts of the tests
      and save their results to be merged later.
    parameters:
      coverage-filename:
        type: string
        default: coverage/coverage-final.json
        description: |
          Path to the final coverage JSON file produced by "nyc" tool.
          Typically called "coverage/coverage-final.json"
      label:
        type: string
        default: default
        description: |
          Human name for the coverage file. For example, when saving both Cypress
          and Jest coverage file, use "cypress" and "jest" to have distinct filenames.
    steps:
      # do not crash if the coverage is not found
      # because a particular CI job might not have any tests to run
      # producing no coverage.
      - run: mkdir coverage-part || true
      - run: touch coverage-part/.placeholder || true
      # use unique job id to avoid accidentally overwriting coverage file
      # and in case the build is parallel, use node index too
      - run: cp <<parameters.coverage-filename>> coverage-part/coverage-<<parameters.label>>-$CIRCLE_WORKFLOW_JOB_ID-index-$CIRCLE_NODE_INDEX.json || true
      - run: ls -la coverage-part
      - persist_to_workspace:
          root: ~/
          paths:
            # note that the current folder is "project"
            # so we need to save the full path correctly
            # otherwise the files will not be restored in the expected location
            - 'project/coverage-part/*'

  merge-coverage-reports:
    description: |
      Merges individual code coverage files using "nyc" tool
      https://github.com/istanbuljs/nyc.
      All individual files should be in the folder "coverage-part"
    steps:
      - run: ls -la .
      - run: ls -la coverage-part || true
      - run: npx nyc merge coverage-part
      - run: mkdir .nyc_output || true
      # storing the combined report in ".nyc_output/out.json"
      # allows other NYC commands to find it right away
      - run: mv coverage.json .nyc_output/out.json
      - run: ls -la .nyc_output

jobs:
  merge-coverage:
    description: Merges individual code coverage files and sends combined data to Coveralls.io
    executor: cypress/base-10
    steps:
      - attach_workspace:
          at: ~/
      - merge-coverage-reports
      - run:
          name: generate coverage report
          command: |
            npx nyc report \
              --reporter lcov --reporter text-summary \
              --report-dir coverage
      - store_artifacts:
          path: coverage
      # send code coverage to coveralls.io
      # https://coveralls.io/github/cypress-io/cypress-example-realworld
      - run:
          command: npm run coveralls || true
  build-app:
    description: Install npm
    # machine option runs your jobs in a dedicated, ephemeral VM that has the following specifications:
    machine: true
    steps:
      - checkout
      - node/install:
          node-version: '12.22'
      # Download and cache dependencies
      - node/install-packages:
          check-cache: always
          with-cache: true
  build-and-push-docker:
    description: Build and push image to Docker Hub
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.14
      - run:
          description: The working directory is the root of the repository so just use "." as path
          name: Build Docker image
          command: docker build -t alu0101056944/realworldappmarcos:latest .
      - run:
          name: Login to Docker Hub
          command: |
            echo $DOCKERHUB_PASSWORD | docker login -u $DOCKERHUB_USERNAME --password-stdin
      - run:
          name: Push Docker image
          command: docker push alu0101056944/realworldappmarcos:latest


  deploy:
    description: Deploy application to Google Kubernetes Engine
    machine: true
    steps:
      - run:
          name: Install gcloud CLI
          command: |
            curl -sSL https://sdk.cloud.google.com | bash -s -- --disable-prompts --install-dir=${HOME}
            echo 'export PATH=$PATH:${HOME}/google-cloud-sdk/bin' >> $BASH_ENV
            source $BASH_ENV
      - run:
          name: Setup gcloud
          command: |
            echo $GCLOUD_SERVICE_KEY | base64 --decode -i > ${HOME}/gcloud-service-key.json
            gcloud auth activate-service-account --key-file ${HOME}/gcloud-service-key.json

            # Check if GOOGLE_PROJECT_ID is set and valid
            if [ -z "$GOOGLE_PROJECT_ID" ] || ! gcloud projects describe $GOOGLE_PROJECT_ID &>/dev/null; then
              echo "GOOGLE_PROJECT_ID is not set or invalid. Please check the project ID and ensure the service account has access to it."
              exit 1
            fi

            # Check if GOOGLE_PROJECT_ID is set
            if [ -z "$GOOGLE_PROJECT_ID" ]; then
              echo "GOOGLE_PROJECT_ID is not set. Please set this environment variable in CircleCI."
              exit 1
            fi
            
            # Set project ID
            gcloud config set project $GOOGLE_PROJECT_ID
            
            # Check if GOOGLE_COMPUTE_REGION is set
            if [ -z "$GOOGLE_COMPUTE_REGION" ]; then
              echo "GOOGLE_COMPUTE_REGION is not set. Please set this environment variable in CircleCI."
              exit 1
            fi

            # Set compute region
            gcloud config set compute/region $GOOGLE_COMPUTE_REGION
            
            # Check if GKE_CLUSTER_NAME is set
            if [ -z "$GKE_CLUSTER_NAME" ]; then
              echo "GKE_CLUSTER_NAME is not set. Please set this environment variable in CircleCI."
              exit 1
            fi

            # Install kubectl manually to avoid permission issues
            curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
            chmod +x kubectl
            sudo mv kubectl /usr/local/bin/
            
            gcloud components install gke-gcloud-auth-plugin
            # Get cluster credentials
            gcloud container clusters get-credentials $GKE_CLUSTER_NAME --region $GOOGLE_COMPUTE_REGION --quiet

            echo "Project ID: $GOOGLE_PROJECT_ID"
            echo "Compute Region: $GOOGLE_COMPUTE_REGION"
            echo "Cluster Name: $GKE_CLUSTER_NAME"
            gcloud config list
            gcloud auth list
            gcloud container clusters list --region $GOOGLE_COMPUTE_REGION
      - run:
          name: Update Kubernetes deployment
          command: |
            kubectl set image deployment/production-marcos-devops real-world-app=docker.io/alu0101056944/realworldappmarcos:latest
            kubectl rollout status deployment/production-marcos-devops

workflows:
  build:
    jobs:
      - cypress/install:
          executor: latest
          pre-steps:
            - run: npm config set unsafe-perm true

      - cypress/run:
          requires:
            - cypress/install
          executor: latest
          parallel: true
          parallelism: 2
          no-workspace: true
          start: npm run start:coverage
          wait-on: http://localhost:4100
          record: false
          post-steps:
            - store_artifacts:
                path: coverage
            # if this machine had no tests to run
            # there will be no coverage report
            - run: npx nyc report --reporter=text || true
            - save-partial-coverage-report:
                label: e2e

      - merge-coverage:
          requires:
            - cypress/run
      - build-app:
          requires:
            - merge-coverage
      - build-and-push-docker:
          requires:
            - build-app
      - deploy:
          requires:
            - build-and-push-docker
