# see orb options at
# https://github.com/cypress-io/circleci-orb
version: 2.1
orbs:
  cypress: cypress-io/cypress@1
  node: circleci/node@5.2.0
  gcp-cli: circleci/gcp-cli@3.2.1
  gcp-gke: circleci/gcp-gke@2.2.0

executors:
  latest:
    docker:
      - image: cypress/browsers:node12.13.0-chrome78-ff70

commands:
  save-partial-coverage-report:
    description: |
      Saves a single possibly partial coverage report by adding it to the
      workspace. This way different CircleCI jobs can run parts of the tests
      and save their results to be merged later.
    parameters:
      coverage-filename:
        type: string
        default: coverage/coverage-final.json
        description: |
          Path to the final coverage JSON file produced by "nyc" tool.
          Typically called "coverage/coverage-final.json"
      label:
        type: string
        default: default
        description: |
          Human name for the coverage file. For example, when saving both Cypress
          and Jest coverage file, use "cypress" and "jest" to have distinct filenames.
    steps:
      # do not crash if the coverage is not found
      # because a particular CI job might not have any tests to run
      # producing no coverage.
      - run: mkdir coverage-part || true
      - run: touch coverage-part/.placeholder || true
      # use unique job id to avoid accidentally overwriting coverage file
      # and in case the build is parallel, use node index too
      - run: cp <<parameters.coverage-filename>> coverage-part/coverage-<<parameters.label>>-$CIRCLE_WORKFLOW_JOB_ID-index-$CIRCLE_NODE_INDEX.json || true
      - run: ls -la coverage-part
      - persist_to_workspace:
          root: ~/
          paths:
            # note that the current folder is "project"
            # so we need to save the full path correctly
            # otherwise the files will not be restored in the expected location
            - 'project/coverage-part/*'

  merge-coverage-reports:
    description: |
      Merges individual code coverage files using "nyc" tool
      https://github.com/istanbuljs/nyc.
      All individual files should be in the folder "coverage-part"
    steps:
      - run: ls -la .
      - run: ls -la coverage-part || true
      - run: npx nyc merge coverage-part
      - run: mkdir .nyc_output || true
      # storing the combined report in ".nyc_output/out.json"
      # allows other NYC commands to find it right away
      - run: mv coverage.json .nyc_output/out.json
      - run: ls -la .nyc_output

jobs:
  merge-coverage:
    description: Merges individual code coverage files and sends combined data to Coveralls.io
    executor: cypress/base-10
    steps:
      - attach_workspace:
          at: ~/
      - merge-coverage-reports
      - run:
          name: generate coverage report
          command: |
            npx nyc report \
              --reporter lcov --reporter text-summary \
              --report-dir coverage
      - store_artifacts:
          path: coverage
      # send code coverage to coveralls.io
      # https://coveralls.io/github/cypress-io/cypress-example-realworld
      - run:
          command: npm run coveralls || true
  build-app:
    description: Install npm
    # machine option runs your jobs in a dedicated, ephemeral VM that has the following specifications:
    machine: true
    steps:
      - checkout
      - node/install:
          node-version: '12.22'
      # Download and cache dependencies
      - node/install-packages:
          check-cache: always
          with-cache: true
  build-and-push-docker:
    description: Build and push image to Docker Hub
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.14
      - run:
          description: The working directory is the root of the repository so just use "." as path
          name: Build Docker image
          command: docker build -t alu0101056944/realworldappmarcos:latest .
      - run:
          name: Login to Docker Hub
          command: |
            echo $DOCKERHUB_PASSWORD | docker login -u $DOCKERHUB_USERNAME --password-stdin
      - run:
          name: Push Docker image
          command: docker push alu0101056944/realworldappmarcos:latest

  deploy:
    description: Deploy application to Google Kubernetes Engine
    executor: gcp-cli/default
    steps:
      - gcp-cli/setup:
          components: "gke-gcloud-auth-plugin kubectl --quiet"
          version: latest
      - gcp-gke/update-kubeconfig-with-credentials:
          cluster: $GKE_CLUSTER_NAME
          use_gke_cloud_auth_plugin: true
      - gcp-gke/rollout-image:
          deployment: production-marcos-devops
          container: real-world-app
          image: docker.io/alu0101056944/realworldappmarcos

workflows:
  build:
    jobs:
      - cypress/install:
          executor: latest
          pre-steps:
            - run: npm config set unsafe-perm true

      - cypress/run:
          requires:
            - cypress/install
          executor: latest
          parallel: true
          parallelism: 2
          no-workspace: true
          start: npm run start:coverage
          wait-on: http://localhost:4100
          record: false
          post-steps:
            - store_artifacts:
                path: coverage
            # if this machine had no tests to run
            # there will be no coverage report
            - run: npx nyc report --reporter=text || true
            - save-partial-coverage-report:
                label: e2e

      - merge-coverage:
          requires:
            - cypress/run
      - build-app:
          requires:
            - merge-coverage
      - build-and-push-docker:
          requires:
            - build-app
      - deploy:
          requires:
            - build-and-push-docker
